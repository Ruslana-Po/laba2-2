//Cтруктура для seta
struct Set{
    string value;
};
struct SetNode {
    int sizes;
    Set** much;
    SetNode(int cap) : sizes(cap) {
        much = new Set*[sizes];
        for (int i = 0; i < sizes; ++i) {
            much[i] = nullptr;
        }
    }

    ~SetNode() {
        for (int i = 0; i < sizes; ++i) {
            delete much[i];
        }
        delete[] much;
    }

    // Чтобы без повторов
    int HashSet(string itemKey) {
        int result = 0;
        for (char i : itemKey) {
            result += static_cast<int>(i);
        }
        return abs(result) % sizes;
    }

    bool isFull() {
        int count = 0;
        for (int i = 0; i < sizes; i++) {
            if (much[i] != nullptr) {
                count++;
            }
        }
        // Проверка на количество элементов
        return count >= sizes;
    }
    bool ReturnZnach(string value, int& znach){
        // Поиск элемента для удаления
        int index= HashSet(value);
        for (int i = 0; i < sizes; i++) {
            if (much[i] == nullptr) {
                return false; // элемент не найден
            }
            if (much[i]->value == value) {
                znach=i;
                return true;
            }
        }
        return false;
    }

    // Добавление
    void AddSet(string value) {
        int index = HashSet(value);
        // Наличие уже такого ключа
        if (much[index] != nullptr && much[index]->value == value) {
            return;
        }
        // Наличие уже такого ключа, если колизия его передвинула
        int rezult=0;
        bool znach=ReturnZnach(value, rezult);
        if(znach){
            return;
        }
        // Проверка на есть ли место
        if (isFull()) {
            cout << "Множество переполнено. Невозможно добавить новый элемент." << endl;
            return;
        }
        // Занят ли индекс
        if (much[index] == nullptr) {
            much[index] = new Set{value}; // Создание нового элемента без передачи предыдущего значения
        } else {
            // Поиск первого свободного места
            for (int i = 0; i < sizes; i++) {
                if (much[i] == nullptr) {
                    much[i] = new Set{value}; // Создание нового элемента
                    break;
                }
            }
        }
    }


    //удаление
    void DelSet(string value){
         //Если было без колизий
         int index= HashSet(value);
         if(much[index]->value==value){
            delete much[index];
            much[index]=nullptr;
            return;
         }

        bool znach = ReturnZnach(value, index);
        if(znach){
            delete much[index];
            much[index]=nullptr;
            return;
        }
    }
    //Есть ли такой элемент
    void SetAt(string value){
        int index= HashSet(value);
         //Если было без колизий
         if(much[index]->value==value){
            cout <<" value: "<< much[index]->value<< endl;
            return;
         }
          bool znach = ReturnZnach(value, index);
        if(znach){
            cout <<" value: "<< much[index]->value<< endl;
            return;
        }
        cout<<"Такого значения нет."<<endl;
    }
     //Вывод
    void Print() {

        for (int i = 0; i < sizes; i++) {
            if (much[i] != nullptr) {
                cout << much[i]->value<<" ";
            }
            cout<<endl;
    }
    }

};
